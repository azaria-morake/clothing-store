generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  image       String?
  products    Product[]
}

model Product {
  id                     String    @id @default(uuid())
  sku                    String?   @unique
  categoryId             String
  name                   String
  description            String
  imagePath              String
  currency               Currency  @default(ZAR)
  isAvailableForPurchase Boolean   @default(true)
  bestSeller             Boolean   @default(false)
  weekSale               Boolean   @default(false)
  price                  Decimal
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  qty                    Int
  trackQty               Boolean
  cost                   Decimal   @default(0)
  discount               Float     @default(0)
  category               Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  variants               Variant[]
}

model Variant {
  id        String     @id @default(uuid())
  productId String
  price     Decimal
  qty       Int
  trackQty  Boolean
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  options   Json
  cartItems CartItem[]
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  province     String?
  postalCode   String?
  country      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  carts        Cart[]
  orders       Order[]
}

model Order {
  id                   String           @id @default(uuid())
  userId               String?
  price                Decimal
  status               OrderStatus      @default(PENDING)
  shippingAddressLine1 String?
  shippingAddressLine2 String?
  shippingCity         String?
  shippingProvince     String?
  shippingPostalCode   String?
  shippingCountry      String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  customerEmail        String?
  customerName         String?
  customerPhone        String?
  productJSON          String
  paidAt               DateTime?
  paymentId            String?
  paymentMethod        String?
  paymentStatus        PaymentStatus    @default(PENDING)
  CourierTracking      CourierTracking?
  user                 User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  variantId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant   Variant  @relation(fields: [variantId], references: [id])
}

model CourierTracking {
  id               String        @id @default(cuid())
  orderId          String        @unique
  status           CourierStatus
  trackingNumber   String?
  carrier          String?
  estimatedArrival DateTime?
  updatedAt        DateTime      @updatedAt
  createdAt        DateTime      @default(now())
  order            Order         @relation(fields: [orderId], references: [id])
}

enum Currency {
  ZAR
  USD
  EUR
  GBP
}

enum OrderStatus {
  PENDING
  PROCESSING
  PARTIALLY_PROCESSED
  FULFILLED
  CANCELLED
  RETURNED
}

enum CourierStatus {
  NOT_DISPATCHED
  SHIPPED
  IN_TRANSIT
  DELIVERED
  FAILED_ATTEMPT
  RETURNED_TO_SENDER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}
